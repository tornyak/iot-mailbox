#!/bin/sh

### BEGIN INIT INFO
# Provides:          iotmailbox service
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: AWS IoT based mailbox thing
# Description:
### END INIT INFO

# Change the next 3 lines to suit where you install your script and what you want to call it
DIR=/var/iot-mailbox
DAEMON=iot-mailbox.js
DAEMON_NAME=iotmailbox
CERTS_FOLDER=certs
THING_NAME=MailboxPi
AWS_ENDPOINT=A31SXFW9PICL8Z.iot.eu-west-1.amazonaws.com
TEST_MODE=2
LOG=${DAEMON_NAME}.log
OUT=${DAEMON_NAME}.out
ERR=${DAEMON_NAME}.err
MIN_UPTIME=60000 #1 min
SPIN_SLEEP_TIME=60000

# Add any command line options for your daemon here
DAEMON_OPTS=""

# This next line determines what user the script runs as.
# Root generally not recommended but necessary if you are using the Raspberry Pi GPIO from Python.
DAEMON_USER=root

# The process ID of the script when it runs is stored here:
PIDFILE=/var/run/${DAEMON_NAME}.pid

. /lib/lsb/init-functions

do_start () {
    log_daemon_msg "Starting system $DAEMON_NAME daemon"
    exec forever --sourceDir=${DIR} -p /var/log --pidFile=${PIDFILE} -a -l ${LOG} -o ${OUT} -e ${ERR} --minUptime=${MIN_UPTIME} --spinSleepTime=${SPIN_SLEEP_TIME}  start ${DAEMON} -f ${CERTS_FOLDER} -T ${THING_NAME} -H ${AWS_ENDPOINT} --test-mode=${TEST_MODE}
    log_end_msg $?
}
do_stop () {
    log_daemon_msg "Stopping system $DAEMON_NAME daemon"
    exec forever stop --sourceDir=${DIR} ${DAEMON}
    log_end_msg $?
}

case "$1" in

    start|stop)
        do_${1}
        ;;

    restart|reload|force-reload)
        do_stop
        do_start
        ;;

    status)
        status_of_proc "$DAEMON_NAME" "$DAEMON" && exit 0 || exit $?
        ;;

    *)
        echo "Usage: /etc/init.d/$DAEMON_NAME {start|stop|restart|status}"
        exit 1
        ;;

esac
exit 0
